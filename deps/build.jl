using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbayesopt"], :libbayesopt),
    LibraryProduct(prefix, ["libnlopt"], :libnlopt),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/jbrea/BayesOptBuilder.jl/releases/download/v0.1.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/BayesOptBuilder.v0.1.0.aarch64-linux-gnu.tar.gz", "86f4465d459e36bc28308f5cab87e2f7f245e61a54d7c85c48a6886eecee6112"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/BayesOptBuilder.v0.1.0.arm-linux-gnueabihf.tar.gz", "9e2f00c601474bd0d8bfddd305eaf0bade7f5923d067b61a3540a6fb01af6b81"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/BayesOptBuilder.v0.1.0.i686-linux-gnu.tar.gz", "ad1c6d0f944e05e38fae819a2d7d0e99911f509b40ec18d0a2f0a8a3891782bc"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/BayesOptBuilder.v0.1.0.powerpc64le-linux-gnu.tar.gz", "5ace2d3c92537767b15a56ac1b3d127980ee95d8d72f26bd3d884b0866570da7"),
    MacOS(:x86_64) => ("$bin_prefix/BayesOptBuilder.v0.1.0.x86_64-apple-darwin14.tar.gz", "5d3e9adec3f0607efdb264f8c255f21285dadabb6c7c33fb034cc8aef9ac4898"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/BayesOptBuilder.v0.1.0.x86_64-linux-gnu.tar.gz", "0d8daff26acd4ee8d3a336dfe3b8e8922938505461220cb343b658e73df140a3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
